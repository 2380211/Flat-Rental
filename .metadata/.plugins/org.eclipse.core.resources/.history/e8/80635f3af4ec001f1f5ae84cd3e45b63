package com.example.controller;

import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import com.example.dto.FlatDTO;
import com.example.entity.Landlord;
import com.example.exception.LandlordNotFoundException;
import com.example.service.LandlordService;

@RestController
@RequestMapping("/landlord")
public class LandlordController {

	@Autowired
	LandlordService service ;
	
	@PostMapping("/add")
	public String addLandlord(@RequestBody Landlord landlord) {
		return service.addLandlord(landlord) ;	
	}
	
	@GetMapping("/get/{landlordId}")
	public Landlord getLandlord(@PathVariable int landlordId) throws LandlordNotFoundException {
		return service.getLandlord(landlordId) ;
	}
	
	@GetMapping("/getAll")
	public List<Landlord> getAll() {
		return service.getAllLandlord() ;
	}
	
	@PutMapping("/update")
	public String updateLandlord(@RequestBody Landlord landlord) throws LandlordNotFoundException {
		return service.updateLandlord(landlord) ;
	}
	
	@DeleteMapping("/delete/{landlordId}")
	public String deleteLandlord( @PathVariable int landlordId) throws LandlordNotFoundException {
		return service.deleteLandlord(landlordId) ;
	}
	
	
	// Methods for a specific landlord
	
	
		// Crud for flat
		
	@PostMapping("/add")
	public String addFlat(@RequestBody FlatDTO flat) {
		return service.addFlat(flat) ;
	}
	
	@GetMapping("/get/{flatId}")
	public FlatDTO getFlat(@PathVariable int flatId) {
		return service.getFlat(flatId) ;
	}
	
	@PutMapping("/update")
	public String updateFlat(@RequestBody FlatDTO flat) {
		return service.updateFlat(flat) ;
	}
	
	@DeleteMapping("/delete/{flatId}")
	public String deleteFlat( @PathVariable int flatId) {
		return service.deleteFlat(flatId) ;
	}
	
	
	
	
	@GetMapping("/getAllFlatsOfLandlord/{landlordId}")
	public List<FlatDTO> getAllFlatsOfLandlord(@PathVariable int landlordId){
		return service.getAllFlatsOfLandlord(landlordId) ;
	}
}
