package com.example.service;

import java.time.LocalDate;
import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.example.client.FlatClient;
import com.example.dto.FlatDTO;
import com.example.entity.Booking;
import com.example.exception.BookingNotFoundException;
import com.example.repository.BookingRepository;

@Service
public class BookingServiceImpl implements BookingService {

	@Autowired
	BookingRepository repo ;
	
	@Autowired
	FlatClient flatClient ;

	public String bookFlat( int flatId,  int TenantId) {
		
//		FlatDTO flatDTO = flatClient.getFlat(flatId) ;
//		if(flatDTO.getStatus().equals("BOOKED")) {
//			return "Flat already booked" ;
//		}
		
		Booking booking = new Booking();
		booking.setBookingTime(LocalDate.now());
		booking.setFlatId(flatId);
		booking.setTenantId(tenantId);
		repo.save(booking) ;
		flatClient.setStatus(flatId, "BOOKED");
		return "Flat booked Successfully" ; 
	}

	@Override
	public Booking getBooking(int bookingId) throws BookingNotFoundException {
		Optional<Booking> op =  repo.findById(bookingId) ;	 
		if(op.isEmpty()) {
			throw new BookingNotFoundException("Booking Not Found") ;
		}
		return op.get() ;
	}

	@Override
	public List<Booking> getAllBookings() {
		return repo.findAll()	 ;
	}



	public String cancelBooking(int flatId) throws BookingNotFoundException {
				
		FlatDTO flat = flatClient.getFlat(flatId) ;
		if(repo.getBookingByFlatId(flatId)==null) {
			throw new BookingNotFoundException("No Booking for this flat") ;
		}
		Booking booking = repo.getBookingByFlatId(flatId);
		
		
		
		repo.deleteById(booking.getBookingId());
		flatClient.setStatus(flatId, "AVAILABLE");
		return "Booking canceled";
	}

		

}
