<?xml version="1.0" encoding="UTF-8"?><testrun name="FlatServiceApplicationTests" project="FlatService" tests="1" started="1" failures="0" errors="1" ignored="0">
  <testsuite name="com.example.demo.FlatServiceApplicationTests" time="0.014" displayname="FlatServiceApplicationTests" uniqueid="[engine:junit-jupiter]/[class:com.example.demo.FlatServiceApplicationTests]">
    <testcase name="testUpdateFlat" classname="com.example.demo.FlatServiceApplicationTests" time="0.014" displayname="testUpdateFlat(Flat)" parameters="com.example.entity.Flat" uniqueid="[engine:junit-jupiter]/[class:com.example.demo.FlatServiceApplicationTests]/[method:testUpdateFlat(com.example.entity.Flat)]">
      <error>org.mockito.exceptions.base.MockitoException: 
Cannot instantiate @InjectMocks field named 'flatService'! Cause: the type 'FlatService' is an interface.
You haven't provided the instance at field declaration so I tried to construct the instance.
Examples of correct usage of @InjectMocks:
   @InjectMocks Service service = new Service();
   @InjectMocks Service service;
   //and... don't forget about some @Mocks for injection :)
&#13;
	at org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.initMocks(MockitoTestExecutionListener.java:94)&#13;
	at org.springframework.boot.test.mock.mockito.MockitoTestExecutionListener.prepareTestInstance(MockitoTestExecutionListener.java:68)&#13;
	at org.springframework.test.context.TestContextManager.prepareTestInstance(TestContextManager.java:260)&#13;
	at org.springframework.test.context.junit.jupiter.SpringExtension.postProcessTestInstance(SpringExtension.java:160)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.accept(ForEachOps.java:184)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)&#13;
	at java.base/java.util.stream.ReferencePipeline$2$1.accept(ReferencePipeline.java:179)&#13;
	at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:197)&#13;
	at java.base/java.util.ArrayList$ArrayListSpliterator.forEachRemaining(ArrayList.java:1708)&#13;
	at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:509)&#13;
	at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:499)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp.evaluateSequential(ForEachOps.java:151)&#13;
	at java.base/java.util.stream.ForEachOps$ForEachOp$OfRef.evaluateSequential(ForEachOps.java:174)&#13;
	at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)&#13;
	at java.base/java.util.stream.ReferencePipeline.forEach(ReferencePipeline.java:596)&#13;
	at java.base/java.util.Optional.orElseGet(Optional.java:364)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)&#13;
	at java.base/java.util.ArrayList.forEach(ArrayList.java:1596)&#13;
&#13;
</error>
    </testcase>
  </testsuite>
</testrun>
